I looked at other "find the hidden object" games online for one part of my competitive analysis. Some games give a score based on the speed at which you find a certain number of objects. Other games give you a time limit, like I talked about in my proposal, but also have multiple object's you're searching for. However, all of these games focus on one picture at a time, and don't flip through them quickly, which is one of the bigger aspects of Octo.py. I can probably experiment with different scoring mechanics and challenges near the end of the project. Almost all of the games have had some kind of "zoom and look around" mechanism, but it's kind of cumbersome. That could be something to think about if finding the octopus ends up being too easy. The UI for these games is also inherently a little different than what it will be for Octo.py, but I thought there was a lot of noise and clutter in the opening pages for the majority of the games, so keeping things clean and simple is something I'm definitely going to focus on. For another part of my competetive analysis, I looked at camouflage generators online. I tried to find a utility that would generate camouflage based on an input image, but couldn't find anything that did that. The camouflage generators available gave a couple different methods of generating patterns which users could select from, and let them pick different colors to be incorporated into the camouflage. All of these features would be handled internall by Octo.py when generating the pattern for the octopus, but seeing the different methods that the camouflage generating utilities used to make patterns was interesting. It seemed to be based more on polygons than noise, which is something to think about.